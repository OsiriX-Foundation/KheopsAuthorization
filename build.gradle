plugins {
    id "org.sonarqube" version "2.6"
    id "org.gretty" version "2.3.1"
}

apply plugin: 'java'
apply plugin: 'war'
//apply plugin: "jacoco"
//apply from: 'https://raw.github.com/gretty-gradle-plugin/gretty/master/pluginScripts/gretty.plugin'


// Enable debugging of gretty started webapp in IDEA
// For debuging a gradle task, IDEA creates a gradle init script (in /tmp/ijinit#.gradle), that sets JVM arguments
// to enable remote debugging.
// Unfortunately by default that only works for gradle tasks that implement JavaForkOptions - which gretty doesn't do.
// So parse the JVM args that IDEA uses from that init script and set them as JVM args to be used by gretty:
def debugArgs = []
if (gradle.startParameter.initScripts) {

    //def line = file(gradle.startParameter.initScripts[0]).readLines().findAll({ x -> x ==~ /.*-agentlib:jdwp=.*/ })[0]
    //if (line) {
    //noinspection GroovyAssignabilityCheck
    //    debugArgs = ((line =~ /.*'(.*)'.*/)[0][1] as String).split(' ')
    //}

    def all_lines = file(gradle.startParameter.initScripts[0]).text

    def firstPattern = "setupDebugger(task.path, "
    def firstIndex = all_lines.indexOf(firstPattern)
    def debugPort = ""
    if (firstIndex > 0) {
        def secondIndex = all_lines.indexOf(")", firstIndex)
        if (secondIndex > 0) {
            debugPort = all_lines.substring(firstIndex + firstPattern.length(), secondIndex)
        }
    }

    if (!debugPort.empty) {

        def socket = null
        def stream = null
        try {
            socket = new Socket("127.0.0.1", Integer.parseInt(debugPort))
            stream = new DataOutputStream(socket.getOutputStream())
            stream.writeInt(10700)
            stream.writeUTF(":jettyStart")
            socket.getInputStream().read();
        }
        catch (Exception e) {}
        finally {
            if (socket != null) socket.close()
            if (stream != null) stream.close()
        }

        debugArgs = ["-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=10700"]
    }
}

repositories {
    mavenCentral()

    maven {
        //noinspection GroovyAssignabilityCheck
        url "https://www.dcm4che.org/maven2/"
    }
}


dependencies {

    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0.1'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.2'

    // https://mvnrepository.com/artifact/org.liquibase/liquibase-core
    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.8.0'

    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.29.1'
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.29.1'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version: '2.29.1'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: '2.29.1'
    compile group: 'org.glassfish.jersey.ext', name: 'jersey-bean-validation', version: '2.29.1'

    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.9'

    compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.2.Final'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.10.Final'
    //compile group: 'org.hibernate', name: 'hibernate-java8', version: '5.4.10.Final'
    compile group: 'org.hibernate', name: 'hibernate-c3p0', version: '5.4.10.Final'

    compile group: 'com.auth0', name: 'java-jwt', version: '3.8.1'
    compile group: 'com.auth0', name: 'jwks-rsa', version: '0.8.2'

    compile 'org.bitbucket.b_c:jose4j:0.6.5'
    
    // https://mvnrepository.com/artifact/org.jooq/jooq
    compile group: 'org.jooq', name: 'jooq', version: '3.12.3'
    // https://mvnrepository.com/artifact/org.jooq/jooq-meta
    compile group: 'org.jooq', name: 'jooq-meta', version: '3.12.3'
    // https://mvnrepository.com/artifact/org.jooq/jooq-codegen
    compile group: 'org.jooq', name: 'jooq-codegen', version: '3.12.3'

    // https://mvnrepository.com/artifact/org.ehcache/ehcache
    compile group: 'org.ehcache', name: 'ehcache', version: '3.6.3'

    
    compile (group: 'org.dcm4che', name: 'dcm4che-dcmr', version: '5.13.0') {
        exclude module: 'slf4j-log4j12'
    }
    compile (group: 'org.dcm4che', name: 'dcm4che-json', version: '5.13.0') {
        exclude module: 'slf4j-log4j12'
    }
    // https://mvnrepository.com/artifact/javax.activation/activation
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'
    

    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.25'

    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
}


gretty {
    jvmArgs = [*debugArgs]

    httpPort = 7575
    contextPath = ''
    servletContainer = 'tomcat9'

    contextConfigFile = 'tomcat-config.xml'
}

test {
    useJUnitPlatform()
}
