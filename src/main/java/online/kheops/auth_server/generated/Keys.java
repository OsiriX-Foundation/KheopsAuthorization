/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated;


import online.kheops.auth_server.generated.tables.AlbumSeries;
import online.kheops.auth_server.generated.tables.AlbumUser;
import online.kheops.auth_server.generated.tables.Albums;
import online.kheops.auth_server.generated.tables.Capabilities;
import online.kheops.auth_server.generated.tables.EventSeries;
import online.kheops.auth_server.generated.tables.Events;
import online.kheops.auth_server.generated.tables.ReportProviders;
import online.kheops.auth_server.generated.tables.Series;
import online.kheops.auth_server.generated.tables.Studies;
import online.kheops.auth_server.generated.tables.Users;
import online.kheops.auth_server.generated.tables.WebhookAttempts;
import online.kheops.auth_server.generated.tables.WebhookTriggerSeries;
import online.kheops.auth_server.generated.tables.WebhookTriggers;
import online.kheops.auth_server.generated.tables.Webhooks;
import online.kheops.auth_server.generated.tables.records.AlbumSeriesRecord;
import online.kheops.auth_server.generated.tables.records.AlbumUserRecord;
import online.kheops.auth_server.generated.tables.records.AlbumsRecord;
import online.kheops.auth_server.generated.tables.records.CapabilitiesRecord;
import online.kheops.auth_server.generated.tables.records.EventSeriesRecord;
import online.kheops.auth_server.generated.tables.records.EventsRecord;
import online.kheops.auth_server.generated.tables.records.ReportProvidersRecord;
import online.kheops.auth_server.generated.tables.records.SeriesRecord;
import online.kheops.auth_server.generated.tables.records.StudiesRecord;
import online.kheops.auth_server.generated.tables.records.UsersRecord;
import online.kheops.auth_server.generated.tables.records.WebhookAttemptsRecord;
import online.kheops.auth_server.generated.tables.records.WebhookTriggerSeriesRecord;
import online.kheops.auth_server.generated.tables.records.WebhookTriggersRecord;
import online.kheops.auth_server.generated.tables.records.WebhooksRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AlbumSeriesRecord> ALBUM_SERIES_PK = Internal.createUniqueKey(AlbumSeries.ALBUM_SERIES, DSL.name("album_series_pk"), new TableField[] { AlbumSeries.ALBUM_SERIES.PK }, true);
    public static final UniqueKey<AlbumSeriesRecord> ALBUM_SERIES_UNIQUE = Internal.createUniqueKey(AlbumSeries.ALBUM_SERIES, DSL.name("album_series_unique"), new TableField[] { AlbumSeries.ALBUM_SERIES.ALBUM_FK, AlbumSeries.ALBUM_SERIES.SERIES_FK }, true);
    public static final UniqueKey<AlbumUserRecord> ALBUM_USER_PK = Internal.createUniqueKey(AlbumUser.ALBUM_USER, DSL.name("album_user_pk"), new TableField[] { AlbumUser.ALBUM_USER.PK }, true);
    public static final UniqueKey<AlbumUserRecord> ALBUM_USER_UNIQUE = Internal.createUniqueKey(AlbumUser.ALBUM_USER, DSL.name("album_user_unique"), new TableField[] { AlbumUser.ALBUM_USER.ALBUM_FK, AlbumUser.ALBUM_USER.USER_FK }, true);
    public static final UniqueKey<AlbumsRecord> ALBUM_PK = Internal.createUniqueKey(Albums.ALBUMS, DSL.name("album_pk"), new TableField[] { Albums.ALBUMS.PK }, true);
    public static final UniqueKey<AlbumsRecord> ALBUMS_ID_UNIQUE = Internal.createUniqueKey(Albums.ALBUMS, DSL.name("albums_id_unique"), new TableField[] { Albums.ALBUMS.ID }, true);
    public static final UniqueKey<CapabilitiesRecord> CAPABILITIES_ID_UNIQUE = Internal.createUniqueKey(Capabilities.CAPABILITIES, DSL.name("capabilities_id_unique"), new TableField[] { Capabilities.CAPABILITIES.ID }, true);
    public static final UniqueKey<CapabilitiesRecord> CAPABILITIES_PK = Internal.createUniqueKey(Capabilities.CAPABILITIES, DSL.name("capabilities_pk"), new TableField[] { Capabilities.CAPABILITIES.PK }, true);
    public static final UniqueKey<CapabilitiesRecord> CAPABILITIES_SECRET_UNIQUE = Internal.createUniqueKey(Capabilities.CAPABILITIES, DSL.name("capabilities_secret_unique"), new TableField[] { Capabilities.CAPABILITIES.SECRET }, true);
    public static final UniqueKey<EventSeriesRecord> EVENT_SERIES_PK = Internal.createUniqueKey(EventSeries.EVENT_SERIES, DSL.name("event_series_pk"), new TableField[] { EventSeries.EVENT_SERIES.PK }, true);
    public static final UniqueKey<EventSeriesRecord> EVENT_SERIES_UNIQUE = Internal.createUniqueKey(EventSeries.EVENT_SERIES, DSL.name("event_series_unique"), new TableField[] { EventSeries.EVENT_SERIES.EVENT_FK, EventSeries.EVENT_SERIES.SERIES_FK }, true);
    public static final UniqueKey<EventsRecord> EVENT_PK = Internal.createUniqueKey(Events.EVENTS, DSL.name("event_pk"), new TableField[] { Events.EVENTS.PK }, true);
    public static final UniqueKey<ReportProvidersRecord> REPORT_PROVIDERS_CLIENT_ID_UNIQUE = Internal.createUniqueKey(ReportProviders.REPORT_PROVIDERS, DSL.name("report_providers_client_id_unique"), new TableField[] { ReportProviders.REPORT_PROVIDERS.CLIENT_ID }, true);
    public static final UniqueKey<ReportProvidersRecord> REPORT_PROVIDERS_PK = Internal.createUniqueKey(ReportProviders.REPORT_PROVIDERS, DSL.name("report_providers_pk"), new TableField[] { ReportProviders.REPORT_PROVIDERS.PK }, true);
    public static final UniqueKey<SeriesRecord> SERIES_PK = Internal.createUniqueKey(Series.SERIES, DSL.name("series_pk"), new TableField[] { Series.SERIES.PK }, true);
    public static final UniqueKey<SeriesRecord> SERIES_UID_UNIQUE = Internal.createUniqueKey(Series.SERIES, DSL.name("series_uid_unique"), new TableField[] { Series.SERIES.SERIES_UID }, true);
    public static final UniqueKey<StudiesRecord> STUDIES_PK = Internal.createUniqueKey(Studies.STUDIES, DSL.name("studies_pk"), new TableField[] { Studies.STUDIES.PK }, true);
    public static final UniqueKey<StudiesRecord> STUDY_UID_UNIQUE = Internal.createUniqueKey(Studies.STUDIES, DSL.name("study_uid_unique"), new TableField[] { Studies.STUDIES.STUDY_UID }, true);
    public static final UniqueKey<UsersRecord> INBOX_FK_UNIQUE = Internal.createUniqueKey(Users.USERS, DSL.name("inbox_fk_unique"), new TableField[] { Users.USERS.INBOX_FK }, true);
    public static final UniqueKey<UsersRecord> SUB_UNIQUE = Internal.createUniqueKey(Users.USERS, DSL.name("sub_unique"), new TableField[] { Users.USERS.SUB }, true);
    public static final UniqueKey<UsersRecord> USERS_EMAIL_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_email_key"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> USERS_PK = Internal.createUniqueKey(Users.USERS, DSL.name("users_pk"), new TableField[] { Users.USERS.PK }, true);
    public static final UniqueKey<WebhookAttemptsRecord> WEBHOOK_ATTEMPT_PK = Internal.createUniqueKey(WebhookAttempts.WEBHOOK_ATTEMPTS, DSL.name("webhook_attempt_pk"), new TableField[] { WebhookAttempts.WEBHOOK_ATTEMPTS.PK }, true);
    public static final UniqueKey<WebhookTriggerSeriesRecord> WEBHOOK_TRIGGER_SERIES_PK = Internal.createUniqueKey(WebhookTriggerSeries.WEBHOOK_TRIGGER_SERIES, DSL.name("webhook_trigger_series_pk"), new TableField[] { WebhookTriggerSeries.WEBHOOK_TRIGGER_SERIES.PK }, true);
    public static final UniqueKey<WebhookTriggerSeriesRecord> WEBHOOK_TRIGGER_SERIES_UNIQUE = Internal.createUniqueKey(WebhookTriggerSeries.WEBHOOK_TRIGGER_SERIES, DSL.name("webhook_trigger_series_unique"), new TableField[] { WebhookTriggerSeries.WEBHOOK_TRIGGER_SERIES.WEBHOOK_TRIGGER_FK, WebhookTriggerSeries.WEBHOOK_TRIGGER_SERIES.SERIES_FK }, true);
    public static final UniqueKey<WebhookTriggersRecord> WEBHOOK_TRIGGERS_ID_UNIQUE = Internal.createUniqueKey(WebhookTriggers.WEBHOOK_TRIGGERS, DSL.name("webhook_triggers_id_unique"), new TableField[] { WebhookTriggers.WEBHOOK_TRIGGERS.ID }, true);
    public static final UniqueKey<WebhookTriggersRecord> WEBHOOK_TRIGGERS_PK = Internal.createUniqueKey(WebhookTriggers.WEBHOOK_TRIGGERS, DSL.name("webhook_triggers_pk"), new TableField[] { WebhookTriggers.WEBHOOK_TRIGGERS.PK }, true);
    public static final UniqueKey<WebhooksRecord> WEBHOOKS_ID_UNIQUE = Internal.createUniqueKey(Webhooks.WEBHOOKS, DSL.name("webhooks_id_unique"), new TableField[] { Webhooks.WEBHOOKS.ID }, true);
    public static final UniqueKey<WebhooksRecord> WEBHOOKS_PK = Internal.createUniqueKey(Webhooks.WEBHOOKS, DSL.name("webhooks_pk"), new TableField[] { Webhooks.WEBHOOKS.PK }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AlbumSeriesRecord, AlbumsRecord> ALBUM_SERIES__ALBUM_SERIES_ALBUM_FK_FKEY = Internal.createForeignKey(AlbumSeries.ALBUM_SERIES, DSL.name("album_series_album_fk_fkey"), new TableField[] { AlbumSeries.ALBUM_SERIES.ALBUM_FK }, Keys.ALBUM_PK, new TableField[] { Albums.ALBUMS.PK }, true);
    public static final ForeignKey<AlbumSeriesRecord, SeriesRecord> ALBUM_SERIES__ALBUM_SERIES_SERIES_FK_FKEY = Internal.createForeignKey(AlbumSeries.ALBUM_SERIES, DSL.name("album_series_series_fk_fkey"), new TableField[] { AlbumSeries.ALBUM_SERIES.SERIES_FK }, Keys.SERIES_PK, new TableField[] { Series.SERIES.PK }, true);
    public static final ForeignKey<AlbumUserRecord, AlbumsRecord> ALBUM_USER__ALBUM_USER_ALBUM_FK_FKEY = Internal.createForeignKey(AlbumUser.ALBUM_USER, DSL.name("album_user_album_fk_fkey"), new TableField[] { AlbumUser.ALBUM_USER.ALBUM_FK }, Keys.ALBUM_PK, new TableField[] { Albums.ALBUMS.PK }, true);
    public static final ForeignKey<AlbumUserRecord, UsersRecord> ALBUM_USER__ALBUM_USER_USER_FK_FKEY = Internal.createForeignKey(AlbumUser.ALBUM_USER, DSL.name("album_user_user_fk_fkey"), new TableField[] { AlbumUser.ALBUM_USER.USER_FK }, Keys.USERS_PK, new TableField[] { Users.USERS.PK }, true);
    public static final ForeignKey<CapabilitiesRecord, AlbumsRecord> CAPABILITIES__CAPABILITIES_ALBUM_FK_FKEY = Internal.createForeignKey(Capabilities.CAPABILITIES, DSL.name("capabilities_album_fk_fkey"), new TableField[] { Capabilities.CAPABILITIES.ALBUM_FK }, Keys.ALBUM_PK, new TableField[] { Albums.ALBUMS.PK }, true);
    public static final ForeignKey<CapabilitiesRecord, UsersRecord> CAPABILITIES__CAPABILITIES_USER_FK_FKEY = Internal.createForeignKey(Capabilities.CAPABILITIES, DSL.name("capabilities_user_fk_fkey"), new TableField[] { Capabilities.CAPABILITIES.USER_FK }, Keys.USERS_PK, new TableField[] { Users.USERS.PK }, true);
    public static final ForeignKey<EventSeriesRecord, EventsRecord> EVENT_SERIES__EVENT_SERIES_EVENT_FK_FKEY = Internal.createForeignKey(EventSeries.EVENT_SERIES, DSL.name("event_series_event_fk_fkey"), new TableField[] { EventSeries.EVENT_SERIES.EVENT_FK }, Keys.EVENT_PK, new TableField[] { Events.EVENTS.PK }, true);
    public static final ForeignKey<EventSeriesRecord, SeriesRecord> EVENT_SERIES__EVENT_SERIES_SERIES_FK_FKEY = Internal.createForeignKey(EventSeries.EVENT_SERIES, DSL.name("event_series_series_fk_fkey"), new TableField[] { EventSeries.EVENT_SERIES.SERIES_FK }, Keys.SERIES_PK, new TableField[] { Series.SERIES.PK }, true);
    public static final ForeignKey<EventsRecord, AlbumsRecord> EVENTS__EVENT_ALBUM_FK_FKEY = Internal.createForeignKey(Events.EVENTS, DSL.name("event_album_fk_fkey"), new TableField[] { Events.EVENTS.ALBUM_FK }, Keys.ALBUM_PK, new TableField[] { Albums.ALBUMS.PK }, true);
    public static final ForeignKey<EventsRecord, CapabilitiesRecord> EVENTS__EVENT_CAPABILITY_FK_FKEY = Internal.createForeignKey(Events.EVENTS, DSL.name("event_capability_fk_fkey"), new TableField[] { Events.EVENTS.CAPABILITY_FK }, Keys.CAPABILITIES_PK, new TableField[] { Capabilities.CAPABILITIES.PK }, true);
    public static final ForeignKey<EventsRecord, UsersRecord> EVENTS__EVENT_PRIVATE_TARGET_USER_FK_FKEY = Internal.createForeignKey(Events.EVENTS, DSL.name("event_private_target_user_fk_fkey"), new TableField[] { Events.EVENTS.PRIVATE_TARGET_USER_FK }, Keys.USERS_PK, new TableField[] { Users.USERS.PK }, true);
    public static final ForeignKey<EventsRecord, ReportProvidersRecord> EVENTS__EVENT_REPORT_PROVIDER_FK_FKEY = Internal.createForeignKey(Events.EVENTS, DSL.name("event_report_provider_fk_fkey"), new TableField[] { Events.EVENTS.REPORT_PROVIDER_FK }, Keys.REPORT_PROVIDERS_PK, new TableField[] { ReportProviders.REPORT_PROVIDERS.PK }, true);
    public static final ForeignKey<EventsRecord, StudiesRecord> EVENTS__EVENT_STUDY_FK_FKEY = Internal.createForeignKey(Events.EVENTS, DSL.name("event_study_fk_fkey"), new TableField[] { Events.EVENTS.STUDY_FK }, Keys.STUDIES_PK, new TableField[] { Studies.STUDIES.PK }, true);
    public static final ForeignKey<EventsRecord, UsersRecord> EVENTS__EVENT_TO_USER_FK_FKEY = Internal.createForeignKey(Events.EVENTS, DSL.name("event_to_user_fk_fkey"), new TableField[] { Events.EVENTS.TO_USER_FK }, Keys.USERS_PK, new TableField[] { Users.USERS.PK }, true);
    public static final ForeignKey<EventsRecord, UsersRecord> EVENTS__EVENT_USER_FK_FKEY = Internal.createForeignKey(Events.EVENTS, DSL.name("event_user_fk_fkey"), new TableField[] { Events.EVENTS.USER_FK }, Keys.USERS_PK, new TableField[] { Users.USERS.PK }, true);
    public static final ForeignKey<ReportProvidersRecord, AlbumsRecord> REPORT_PROVIDERS__REPORT_PROVIDERS_ALBUM_FK_FKEY = Internal.createForeignKey(ReportProviders.REPORT_PROVIDERS, DSL.name("report_providers_album_fk_fkey"), new TableField[] { ReportProviders.REPORT_PROVIDERS.ALBUM_FK }, Keys.ALBUM_PK, new TableField[] { Albums.ALBUMS.PK }, true);
    public static final ForeignKey<SeriesRecord, StudiesRecord> SERIES__SERIES_STUDY_FK_FKEY = Internal.createForeignKey(Series.SERIES, DSL.name("series_study_fk_fkey"), new TableField[] { Series.SERIES.STUDY_FK }, Keys.STUDIES_PK, new TableField[] { Studies.STUDIES.PK }, true);
    public static final ForeignKey<UsersRecord, AlbumsRecord> USERS__USERS_INBOX_FK_FKEY = Internal.createForeignKey(Users.USERS, DSL.name("users_inbox_fk_fkey"), new TableField[] { Users.USERS.INBOX_FK }, Keys.ALBUM_PK, new TableField[] { Albums.ALBUMS.PK }, true);
    public static final ForeignKey<WebhookAttemptsRecord, WebhookTriggersRecord> WEBHOOK_ATTEMPTS__WEBHOOK_ATTEMPTS_WEBHOOK_TRIGGERS_FK_FKEY = Internal.createForeignKey(WebhookAttempts.WEBHOOK_ATTEMPTS, DSL.name("webhook_attempts_webhook_triggers_fk_fkey"), new TableField[] { WebhookAttempts.WEBHOOK_ATTEMPTS.WEBHOOK_TRIGGER_FK }, Keys.WEBHOOK_TRIGGERS_PK, new TableField[] { WebhookTriggers.WEBHOOK_TRIGGERS.PK }, true);
    public static final ForeignKey<WebhookTriggerSeriesRecord, SeriesRecord> WEBHOOK_TRIGGER_SERIES__WEBHOOK_TRIGGER_SERIES_SERIES_FK_FKEY = Internal.createForeignKey(WebhookTriggerSeries.WEBHOOK_TRIGGER_SERIES, DSL.name("webhook_trigger_series_series_fk_fkey"), new TableField[] { WebhookTriggerSeries.WEBHOOK_TRIGGER_SERIES.SERIES_FK }, Keys.SERIES_PK, new TableField[] { Series.SERIES.PK }, true);
    public static final ForeignKey<WebhookTriggerSeriesRecord, WebhookTriggersRecord> WEBHOOK_TRIGGER_SERIES__WEBHOOK_TRIGGER_SERIES_WEBHOOK_TRIGGER_FK_FKEY = Internal.createForeignKey(WebhookTriggerSeries.WEBHOOK_TRIGGER_SERIES, DSL.name("webhook_trigger_series_webhook_trigger_fk_fkey"), new TableField[] { WebhookTriggerSeries.WEBHOOK_TRIGGER_SERIES.WEBHOOK_TRIGGER_FK }, Keys.WEBHOOK_TRIGGERS_PK, new TableField[] { WebhookTriggers.WEBHOOK_TRIGGERS.PK }, true);
    public static final ForeignKey<WebhookTriggersRecord, UsersRecord> WEBHOOK_TRIGGERS__WEBHOOK_TRIGGERS_USER_FK_FKEY = Internal.createForeignKey(WebhookTriggers.WEBHOOK_TRIGGERS, DSL.name("webhook_triggers_user_fk_fkey"), new TableField[] { WebhookTriggers.WEBHOOK_TRIGGERS.USER_FK }, Keys.USERS_PK, new TableField[] { Users.USERS.PK }, true);
    public static final ForeignKey<WebhookTriggersRecord, WebhooksRecord> WEBHOOK_TRIGGERS__WEBHOOK_TRIGGERS_WEBHOOK_FK_FKEY = Internal.createForeignKey(WebhookTriggers.WEBHOOK_TRIGGERS, DSL.name("webhook_triggers_webhook_fk_fkey"), new TableField[] { WebhookTriggers.WEBHOOK_TRIGGERS.WEBHOOK_FK }, Keys.WEBHOOKS_PK, new TableField[] { Webhooks.WEBHOOKS.PK }, true);
    public static final ForeignKey<WebhooksRecord, AlbumsRecord> WEBHOOKS__WEBHOOK_ALBUM_FK_FKEY = Internal.createForeignKey(Webhooks.WEBHOOKS, DSL.name("webhook_album_fk_fkey"), new TableField[] { Webhooks.WEBHOOKS.ALBUM_FK }, Keys.ALBUM_PK, new TableField[] { Albums.ALBUMS.PK }, true);
    public static final ForeignKey<WebhooksRecord, UsersRecord> WEBHOOKS__WEBHOOK_USER_FK_FKEY = Internal.createForeignKey(Webhooks.WEBHOOKS, DSL.name("webhook_user_fk_fkey"), new TableField[] { Webhooks.WEBHOOKS.USER_FK }, Keys.USERS_PK, new TableField[] { Users.USERS.PK }, true);
}
