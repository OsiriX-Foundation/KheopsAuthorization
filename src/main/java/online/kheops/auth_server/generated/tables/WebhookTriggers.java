/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import java.util.Arrays;
import java.util.List;

import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Public;
import online.kheops.auth_server.generated.tables.records.WebhookTriggersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WebhookTriggers extends TableImpl<WebhookTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.webhook_triggers</code>
     */
    public static final WebhookTriggers WEBHOOK_TRIGGERS = new WebhookTriggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebhookTriggersRecord> getRecordType() {
        return WebhookTriggersRecord.class;
    }

    /**
     * The column <code>public.webhook_triggers.pk</code>.
     */
    public final TableField<WebhookTriggersRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.webhook_triggers.id</code>.
     */
    public final TableField<WebhookTriggersRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.webhook_triggers.webhook_fk</code>.
     */
    public final TableField<WebhookTriggersRecord, Long> WEBHOOK_FK = createField(DSL.name("webhook_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.webhook_triggers.is_manual_trigger</code>.
     */
    public final TableField<WebhookTriggersRecord, Boolean> IS_MANUAL_TRIGGER = createField(DSL.name("is_manual_trigger"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.webhook_triggers.new_series</code>.
     */
    public final TableField<WebhookTriggersRecord, Boolean> NEW_SERIES = createField(DSL.name("new_series"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.webhook_triggers.new_user</code>.
     */
    public final TableField<WebhookTriggersRecord, Boolean> NEW_USER = createField(DSL.name("new_user"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.webhook_triggers.user_fk</code>.
     */
    public final TableField<WebhookTriggersRecord, Long> USER_FK = createField(DSL.name("user_fk"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.webhook_triggers.remove_series</code>.
     */
    public final TableField<WebhookTriggersRecord, Boolean> REMOVE_SERIES = createField(DSL.name("remove_series"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private WebhookTriggers(Name alias, Table<WebhookTriggersRecord> aliased) {
        this(alias, aliased, null);
    }

    private WebhookTriggers(Name alias, Table<WebhookTriggersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.webhook_triggers</code> table reference
     */
    public WebhookTriggers(String alias) {
        this(DSL.name(alias), WEBHOOK_TRIGGERS);
    }

    /**
     * Create an aliased <code>public.webhook_triggers</code> table reference
     */
    public WebhookTriggers(Name alias) {
        this(alias, WEBHOOK_TRIGGERS);
    }

    /**
     * Create a <code>public.webhook_triggers</code> table reference
     */
    public WebhookTriggers() {
        this(DSL.name("webhook_triggers"), null);
    }

    public <O extends Record> WebhookTriggers(Table<O> child, ForeignKey<O, WebhookTriggersRecord> key) {
        super(child, key, WEBHOOK_TRIGGERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WEBHOOK_TRIGGERS_WEBHOOK_FK_INDEX);
    }

    @Override
    public Identity<WebhookTriggersRecord, Long> getIdentity() {
        return (Identity<WebhookTriggersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WebhookTriggersRecord> getPrimaryKey() {
        return Keys.WEBHOOK_TRIGGERS_PK;
    }

    @Override
    public List<UniqueKey<WebhookTriggersRecord>> getKeys() {
        return Arrays.<UniqueKey<WebhookTriggersRecord>>asList(Keys.WEBHOOK_TRIGGERS_PK, Keys.WEBHOOK_TRIGGERS_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<WebhookTriggersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WebhookTriggersRecord, ?>>asList(Keys.WEBHOOK_TRIGGERS__WEBHOOK_TRIGGERS_WEBHOOK_FK_FKEY, Keys.WEBHOOK_TRIGGERS__WEBHOOK_TRIGGERS_USER_FK_FKEY);
    }

    public Webhooks webhooks() {
        return new Webhooks(this, Keys.WEBHOOK_TRIGGERS__WEBHOOK_TRIGGERS_WEBHOOK_FK_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.WEBHOOK_TRIGGERS__WEBHOOK_TRIGGERS_USER_FK_FKEY);
    }

    @Override
    public WebhookTriggers as(String alias) {
        return new WebhookTriggers(DSL.name(alias), this);
    }

    @Override
    public WebhookTriggers as(Name alias) {
        return new WebhookTriggers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WebhookTriggers rename(String name) {
        return new WebhookTriggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WebhookTriggers rename(Name name) {
        return new WebhookTriggers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, Long, Boolean, Boolean, Boolean, Long, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
