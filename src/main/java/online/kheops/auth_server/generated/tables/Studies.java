/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Public;
import online.kheops.auth_server.generated.tables.records.StudiesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Studies extends TableImpl<StudiesRecord> {

    private static final long serialVersionUID = -1346403991;

    /**
     * The reference instance of <code>public.studies</code>
     */
    public static final Studies STUDIES = new Studies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudiesRecord> getRecordType() {
        return StudiesRecord.class;
    }

    /**
     * The column <code>public.studies.pk</code>.
     */
    public final TableField<StudiesRecord, Long> PK = createField("pk", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.studies.created_time</code>.
     */
    public final TableField<StudiesRecord, Timestamp> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.studies.updated_time</code>.
     */
    public final TableField<StudiesRecord, Timestamp> UPDATED_TIME = createField("updated_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.studies.study_uid</code>.
     */
    public final TableField<StudiesRecord, String> STUDY_UID = createField("study_uid", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.studies.study_date</code>.
     */
    public final TableField<StudiesRecord, String> STUDY_DATE = createField("study_date", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.studies.study_time</code>.
     */
    public final TableField<StudiesRecord, String> STUDY_TIME = createField("study_time", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.studies.study_description</code>.
     */
    public final TableField<StudiesRecord, String> STUDY_DESCRIPTION = createField("study_description", org.jooq.impl.SQLDataType.VARCHAR(155), this, "");

    /**
     * The column <code>public.studies.timezone_offset_from_utc</code>.
     */
    public final TableField<StudiesRecord, String> TIMEZONE_OFFSET_FROM_UTC = createField("timezone_offset_from_utc", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.studies.accession_number</code>.
     */
    public final TableField<StudiesRecord, String> ACCESSION_NUMBER = createField("accession_number", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.studies.referring_physician_name</code>.
     */
    public final TableField<StudiesRecord, String> REFERRING_PHYSICIAN_NAME = createField("referring_physician_name", org.jooq.impl.SQLDataType.VARCHAR(4095), this, "");

    /**
     * The column <code>public.studies.patient_name</code>.
     */
    public final TableField<StudiesRecord, String> PATIENT_NAME = createField("patient_name", org.jooq.impl.SQLDataType.VARCHAR(4095), this, "");

    /**
     * The column <code>public.studies.patient_id</code>.
     */
    public final TableField<StudiesRecord, String> PATIENT_ID = createField("patient_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.studies.patient_birth_date</code>.
     */
    public final TableField<StudiesRecord, String> PATIENT_BIRTH_DATE = createField("patient_birth_date", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.studies.patient_sex</code>.
     */
    public final TableField<StudiesRecord, String> PATIENT_SEX = createField("patient_sex", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.studies.study_id</code>.
     */
    public final TableField<StudiesRecord, String> STUDY_ID = createField("study_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.studies</code> table reference
     */
    public Studies() {
        this(DSL.name("studies"), null);
    }

    /**
     * Create an aliased <code>public.studies</code> table reference
     */
    public Studies(String alias) {
        this(DSL.name(alias), STUDIES);
    }

    /**
     * Create an aliased <code>public.studies</code> table reference
     */
    public Studies(Name alias) {
        this(alias, STUDIES);
    }

    private Studies(Name alias, Table<StudiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Studies(Name alias, Table<StudiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Studies(Table<O> child, ForeignKey<O, StudiesRecord> key) {
        super(child, key, STUDIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCESSION_NUMBER_INDEX, Indexes.PATIENT_ID_INDEX, Indexes.STUDIES_PK, Indexes.STUDY_DATE_INDEX, Indexes.STUDY_ID_INDEX, Indexes.STUDY_TIME_INDEX, Indexes.STUDY_UID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StudiesRecord> getPrimaryKey() {
        return Keys.STUDIES_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StudiesRecord>> getKeys() {
        return Arrays.<UniqueKey<StudiesRecord>>asList(Keys.STUDIES_PK, Keys.STUDY_UID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Studies as(String alias) {
        return new Studies(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Studies as(Name alias) {
        return new Studies(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Studies rename(String name) {
        return new Studies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Studies rename(Name name) {
        return new Studies(name, null);
    }
}
