/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Public;
import online.kheops.auth_server.generated.tables.records.ReportProvidersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReportProviders extends TableImpl<ReportProvidersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.report_providers</code>
     */
    public static final ReportProviders REPORT_PROVIDERS = new ReportProviders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportProvidersRecord> getRecordType() {
        return ReportProvidersRecord.class;
    }

    /**
     * The column <code>public.report_providers.pk</code>.
     */
    public final TableField<ReportProvidersRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.report_providers.album_fk</code>.
     */
    public final TableField<ReportProvidersRecord, Long> ALBUM_FK = createField(DSL.name("album_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.report_providers.creation_time</code>.
     */
    public final TableField<ReportProvidersRecord, LocalDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.report_providers.name</code>.
     */
    public final TableField<ReportProvidersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.report_providers.url</code>.
     */
    public final TableField<ReportProvidersRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.report_providers.client_id</code>.
     */
    public final TableField<ReportProvidersRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.report_providers.removed</code>.
     */
    public final TableField<ReportProvidersRecord, Boolean> REMOVED = createField(DSL.name("removed"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private ReportProviders(Name alias, Table<ReportProvidersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReportProviders(Name alias, Table<ReportProvidersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.report_providers</code> table reference
     */
    public ReportProviders(String alias) {
        this(DSL.name(alias), REPORT_PROVIDERS);
    }

    /**
     * Create an aliased <code>public.report_providers</code> table reference
     */
    public ReportProviders(Name alias) {
        this(alias, REPORT_PROVIDERS);
    }

    /**
     * Create a <code>public.report_providers</code> table reference
     */
    public ReportProviders() {
        this(DSL.name("report_providers"), null);
    }

    public <O extends Record> ReportProviders(Table<O> child, ForeignKey<O, ReportProvidersRecord> key) {
        super(child, key, REPORT_PROVIDERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REPORT_PROVIDERS_ALBUM_FK_INDEX, Indexes.REPORT_PROVIDERS_CLIENT_ID_INDEX, Indexes.REPORT_PROVIDERS_CREATION_TIME_ALBUM_FK_INDEX);
    }

    @Override
    public Identity<ReportProvidersRecord, Long> getIdentity() {
        return (Identity<ReportProvidersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReportProvidersRecord> getPrimaryKey() {
        return Keys.REPORT_PROVIDERS_PK;
    }

    @Override
    public List<UniqueKey<ReportProvidersRecord>> getKeys() {
        return Arrays.<UniqueKey<ReportProvidersRecord>>asList(Keys.REPORT_PROVIDERS_PK, Keys.REPORT_PROVIDERS_CLIENT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ReportProvidersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReportProvidersRecord, ?>>asList(Keys.REPORT_PROVIDERS__REPORT_PROVIDERS_ALBUM_FK_FKEY);
    }

    public Albums albums() {
        return new Albums(this, Keys.REPORT_PROVIDERS__REPORT_PROVIDERS_ALBUM_FK_FKEY);
    }

    @Override
    public ReportProviders as(String alias) {
        return new ReportProviders(DSL.name(alias), this);
    }

    @Override
    public ReportProviders as(Name alias) {
        return new ReportProviders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportProviders rename(String name) {
        return new ReportProviders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportProviders rename(Name name) {
        return new ReportProviders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, LocalDateTime, String, String, String, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
