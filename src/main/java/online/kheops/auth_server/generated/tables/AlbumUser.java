/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import java.util.Arrays;
import java.util.List;

import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Public;
import online.kheops.auth_server.generated.tables.records.AlbumUserRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumUser extends TableImpl<AlbumUserRecord> {

    private static final long serialVersionUID = 1678704917;

    /**
     * The reference instance of <code>public.album_user</code>
     */
    public static final AlbumUser ALBUM_USER = new AlbumUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumUserRecord> getRecordType() {
        return AlbumUserRecord.class;
    }

    /**
     * The column <code>public.album_user.pk</code>.
     */
    public final TableField<AlbumUserRecord, Long> PK = createField(DSL.name("pk"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.album_user.album_fk</code>.
     */
    public final TableField<AlbumUserRecord, Long> ALBUM_FK = createField(DSL.name("album_fk"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.album_user.user_fk</code>.
     */
    public final TableField<AlbumUserRecord, Long> USER_FK = createField(DSL.name("user_fk"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.album_user.admin</code>.
     */
    public final TableField<AlbumUserRecord, Boolean> ADMIN = createField(DSL.name("admin"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.album_user.new_series_notifications</code>.
     */
    public final TableField<AlbumUserRecord, Boolean> NEW_SERIES_NOTIFICATIONS = createField(DSL.name("new_series_notifications"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.album_user.new_comment_notifications</code>.
     */
    public final TableField<AlbumUserRecord, Boolean> NEW_COMMENT_NOTIFICATIONS = createField(DSL.name("new_comment_notifications"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.album_user.favorite</code>.
     */
    public final TableField<AlbumUserRecord, Boolean> FAVORITE = createField(DSL.name("favorite"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.album_user</code> table reference
     */
    public AlbumUser() {
        this(DSL.name("album_user"), null);
    }

    /**
     * Create an aliased <code>public.album_user</code> table reference
     */
    public AlbumUser(String alias) {
        this(DSL.name(alias), ALBUM_USER);
    }

    /**
     * Create an aliased <code>public.album_user</code> table reference
     */
    public AlbumUser(Name alias) {
        this(alias, ALBUM_USER);
    }

    private AlbumUser(Name alias, Table<AlbumUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlbumUser(Name alias, Table<AlbumUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AlbumUser(Table<O> child, ForeignKey<O, AlbumUserRecord> key) {
        super(child, key, ALBUM_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ALBUM_USER_ALBUM_FK_INDEX, Indexes.ALBUM_USER_USER_FK_INDEX);
    }

    @Override
    public Identity<AlbumUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_ALBUM_USER;
    }

    @Override
    public UniqueKey<AlbumUserRecord> getPrimaryKey() {
        return Keys.ALBUM_USER_PK;
    }

    @Override
    public List<UniqueKey<AlbumUserRecord>> getKeys() {
        return Arrays.<UniqueKey<AlbumUserRecord>>asList(Keys.ALBUM_USER_PK, Keys.ALBUM_USER_UNIQUE);
    }

    @Override
    public List<ForeignKey<AlbumUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AlbumUserRecord, ?>>asList(Keys.ALBUM_USER__ALBUM_USER_ALBUM_FK_FKEY, Keys.ALBUM_USER__ALBUM_USER_USER_FK_FKEY);
    }

    public Albums albums() {
        return new Albums(this, Keys.ALBUM_USER__ALBUM_USER_ALBUM_FK_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.ALBUM_USER__ALBUM_USER_USER_FK_FKEY);
    }

    @Override
    public AlbumUser as(String alias) {
        return new AlbumUser(DSL.name(alias), this);
    }

    @Override
    public AlbumUser as(Name alias) {
        return new AlbumUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumUser rename(String name) {
        return new AlbumUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumUser rename(Name name) {
        return new AlbumUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
