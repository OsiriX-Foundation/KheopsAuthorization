/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Public;
import online.kheops.auth_server.generated.tables.records.AlbumsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Albums extends TableImpl<AlbumsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.albums</code>
     */
    public static final Albums ALBUMS = new Albums();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumsRecord> getRecordType() {
        return AlbumsRecord.class;
    }

    /**
     * The column <code>public.albums.pk</code>.
     */
    public final TableField<AlbumsRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.albums.id</code>.
     */
    public final TableField<AlbumsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.albums.name</code>.
     */
    public final TableField<AlbumsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.albums.description</code>.
     */
    public final TableField<AlbumsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>public.albums.created_time</code>.
     */
    public final TableField<AlbumsRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.albums.last_event_time</code>.
     */
    public final TableField<AlbumsRecord, LocalDateTime> LAST_EVENT_TIME = createField(DSL.name("last_event_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.albums.add_user_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> ADD_USER_PERMISSION = createField(DSL.name("add_user_permission"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.albums.download_series_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> DOWNLOAD_SERIES_PERMISSION = createField(DSL.name("download_series_permission"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.albums.send_series_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> SEND_SERIES_PERMISSION = createField(DSL.name("send_series_permission"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.albums.delete_series_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> DELETE_SERIES_PERMISSION = createField(DSL.name("delete_series_permission"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.albums.add_series_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> ADD_SERIES_PERMISSION = createField(DSL.name("add_series_permission"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.albums.write_comments_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> WRITE_COMMENTS_PERMISSION = createField(DSL.name("write_comments_permission"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private Albums(Name alias, Table<AlbumsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Albums(Name alias, Table<AlbumsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.albums</code> table reference
     */
    public Albums(String alias) {
        this(DSL.name(alias), ALBUMS);
    }

    /**
     * Create an aliased <code>public.albums</code> table reference
     */
    public Albums(Name alias) {
        this(alias, ALBUMS);
    }

    /**
     * Create a <code>public.albums</code> table reference
     */
    public Albums() {
        this(DSL.name("albums"), null);
    }

    public <O extends Record> Albums(Table<O> child, ForeignKey<O, AlbumsRecord> key) {
        super(child, key, ALBUMS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ALBUMS_LAST_EVENT_TIME_INDEX);
    }

    @Override
    public Identity<AlbumsRecord, Long> getIdentity() {
        return (Identity<AlbumsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AlbumsRecord> getPrimaryKey() {
        return Keys.ALBUM_PK;
    }

    @Override
    public List<UniqueKey<AlbumsRecord>> getKeys() {
        return Arrays.<UniqueKey<AlbumsRecord>>asList(Keys.ALBUM_PK, Keys.ALBUMS_ID_UNIQUE);
    }

    @Override
    public Albums as(String alias) {
        return new Albums(DSL.name(alias), this);
    }

    @Override
    public Albums as(Name alias) {
        return new Albums(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Albums rename(String name) {
        return new Albums(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Albums rename(Name name) {
        return new Albums(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, String, String, LocalDateTime, LocalDateTime, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
