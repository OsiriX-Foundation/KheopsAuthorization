/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import java.util.Arrays;
import java.util.List;

import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Public;
import online.kheops.auth_server.generated.tables.records.WebhookTriggerSeriesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WebhookTriggerSeries extends TableImpl<WebhookTriggerSeriesRecord> {

    private static final long serialVersionUID = -1825934220;

    /**
     * The reference instance of <code>public.webhook_trigger_series</code>
     */
    public static final WebhookTriggerSeries WEBHOOK_TRIGGER_SERIES = new WebhookTriggerSeries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebhookTriggerSeriesRecord> getRecordType() {
        return WebhookTriggerSeriesRecord.class;
    }

    /**
     * The column <code>public.webhook_trigger_series.pk</code>.
     */
    public final TableField<WebhookTriggerSeriesRecord, Long> PK = createField(DSL.name("pk"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.webhook_trigger_series.webhook_trigger_fk</code>.
     */
    public final TableField<WebhookTriggerSeriesRecord, Long> WEBHOOK_TRIGGER_FK = createField(DSL.name("webhook_trigger_fk"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.webhook_trigger_series.series_fk</code>.
     */
    public final TableField<WebhookTriggerSeriesRecord, Long> SERIES_FK = createField(DSL.name("series_fk"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.webhook_trigger_series</code> table reference
     */
    public WebhookTriggerSeries() {
        this(DSL.name("webhook_trigger_series"), null);
    }

    /**
     * Create an aliased <code>public.webhook_trigger_series</code> table reference
     */
    public WebhookTriggerSeries(String alias) {
        this(DSL.name(alias), WEBHOOK_TRIGGER_SERIES);
    }

    /**
     * Create an aliased <code>public.webhook_trigger_series</code> table reference
     */
    public WebhookTriggerSeries(Name alias) {
        this(alias, WEBHOOK_TRIGGER_SERIES);
    }

    private WebhookTriggerSeries(Name alias, Table<WebhookTriggerSeriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private WebhookTriggerSeries(Name alias, Table<WebhookTriggerSeriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> WebhookTriggerSeries(Table<O> child, ForeignKey<O, WebhookTriggerSeriesRecord> key) {
        super(child, key, WEBHOOK_TRIGGER_SERIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WEBHOOK_TRIGGER_SERIES_WEBHOOK_TRIGGER_FK_INDEX);
    }

    @Override
    public Identity<WebhookTriggerSeriesRecord, Long> getIdentity() {
        return Keys.IDENTITY_WEBHOOK_TRIGGER_SERIES;
    }

    @Override
    public UniqueKey<WebhookTriggerSeriesRecord> getPrimaryKey() {
        return Keys.WEBHOOK_TRIGGER_SERIES_PK;
    }

    @Override
    public List<UniqueKey<WebhookTriggerSeriesRecord>> getKeys() {
        return Arrays.<UniqueKey<WebhookTriggerSeriesRecord>>asList(Keys.WEBHOOK_TRIGGER_SERIES_PK, Keys.WEBHOOK_TRIGGER_SERIES_UNIQUE);
    }

    @Override
    public List<ForeignKey<WebhookTriggerSeriesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WebhookTriggerSeriesRecord, ?>>asList(Keys.WEBHOOK_TRIGGER_SERIES__WEBHOOK_TRIGGER_SERIES_WEBHOOK_TRIGGER_FK_FKEY, Keys.WEBHOOK_TRIGGER_SERIES__WEBHOOK_TRIGGER_SERIES_SERIES_FK_FKEY);
    }

    public WebhookTriggers webhookTriggers() {
        return new WebhookTriggers(this, Keys.WEBHOOK_TRIGGER_SERIES__WEBHOOK_TRIGGER_SERIES_WEBHOOK_TRIGGER_FK_FKEY);
    }

    public Series series() {
        return new Series(this, Keys.WEBHOOK_TRIGGER_SERIES__WEBHOOK_TRIGGER_SERIES_SERIES_FK_FKEY);
    }

    @Override
    public WebhookTriggerSeries as(String alias) {
        return new WebhookTriggerSeries(DSL.name(alias), this);
    }

    @Override
    public WebhookTriggerSeries as(Name alias) {
        return new WebhookTriggerSeries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WebhookTriggerSeries rename(String name) {
        return new WebhookTriggerSeries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WebhookTriggerSeries rename(Name name) {
        return new WebhookTriggerSeries(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
