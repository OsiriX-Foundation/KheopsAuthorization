/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Public;
import online.kheops.auth_server.generated.tables.records.WebhooksRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Webhooks extends TableImpl<WebhooksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.webhooks</code>
     */
    public static final Webhooks WEBHOOKS = new Webhooks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebhooksRecord> getRecordType() {
        return WebhooksRecord.class;
    }

    /**
     * The column <code>public.webhooks.pk</code>.
     */
    public final TableField<WebhooksRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.webhooks.id</code>.
     */
    public final TableField<WebhooksRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.webhooks.name</code>.
     */
    public final TableField<WebhooksRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.webhooks.url</code>.
     */
    public final TableField<WebhooksRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.webhooks.enabled</code>.
     */
    public final TableField<WebhooksRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.webhooks.creation_time</code>.
     */
    public final TableField<WebhooksRecord, LocalDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.webhooks.user_fk</code>.
     */
    public final TableField<WebhooksRecord, Long> USER_FK = createField(DSL.name("user_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.webhooks.secret</code>.
     */
    public final TableField<WebhooksRecord, String> SECRET = createField(DSL.name("secret"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.webhooks.new_series</code>.
     */
    public final TableField<WebhooksRecord, Boolean> NEW_SERIES = createField(DSL.name("new_series"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.webhooks.new_user</code>.
     */
    public final TableField<WebhooksRecord, Boolean> NEW_USER = createField(DSL.name("new_user"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.webhooks.album_fk</code>.
     */
    public final TableField<WebhooksRecord, Long> ALBUM_FK = createField(DSL.name("album_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.webhooks.remove_series</code>.
     */
    public final TableField<WebhooksRecord, Boolean> REMOVE_SERIES = createField(DSL.name("remove_series"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.webhooks.delete_album</code>.
     */
    public final TableField<WebhooksRecord, Boolean> DELETE_ALBUM = createField(DSL.name("delete_album"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private Webhooks(Name alias, Table<WebhooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Webhooks(Name alias, Table<WebhooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.webhooks</code> table reference
     */
    public Webhooks(String alias) {
        this(DSL.name(alias), WEBHOOKS);
    }

    /**
     * Create an aliased <code>public.webhooks</code> table reference
     */
    public Webhooks(Name alias) {
        this(alias, WEBHOOKS);
    }

    /**
     * Create a <code>public.webhooks</code> table reference
     */
    public Webhooks() {
        this(DSL.name("webhooks"), null);
    }

    public <O extends Record> Webhooks(Table<O> child, ForeignKey<O, WebhooksRecord> key) {
        super(child, key, WEBHOOKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WEBHOOKS_ALBUM_FK_INDEX, Indexes.WEBHOOKS_ENABLED_INDEX, Indexes.WEBHOOKS_URL_INDEX);
    }

    @Override
    public Identity<WebhooksRecord, Long> getIdentity() {
        return (Identity<WebhooksRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WebhooksRecord> getPrimaryKey() {
        return Keys.WEBHOOKS_PK;
    }

    @Override
    public List<UniqueKey<WebhooksRecord>> getKeys() {
        return Arrays.<UniqueKey<WebhooksRecord>>asList(Keys.WEBHOOKS_PK, Keys.WEBHOOKS_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<WebhooksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WebhooksRecord, ?>>asList(Keys.WEBHOOKS__WEBHOOK_USER_FK_FKEY, Keys.WEBHOOKS__WEBHOOK_ALBUM_FK_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.WEBHOOKS__WEBHOOK_USER_FK_FKEY);
    }

    public Albums albums() {
        return new Albums(this, Keys.WEBHOOKS__WEBHOOK_ALBUM_FK_FKEY);
    }

    @Override
    public Webhooks as(String alias) {
        return new Webhooks(DSL.name(alias), this);
    }

    @Override
    public Webhooks as(Name alias) {
        return new Webhooks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Webhooks rename(String name) {
        return new Webhooks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Webhooks rename(Name name) {
        return new Webhooks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, String, String, Boolean, LocalDateTime, Long, String, Boolean, Boolean, Long, Boolean, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
